{"version":3,"sources":["images sync nonrecursive /.(jpg|jpe?g|webp)$","images/arches.jpg","images/bryce.webp","images/carlsbadcaverns.jpg","images/deathvalley.jpg","images/dvexample.jpg","images/everglades.jpg","images/gila.jpg","images/joshua tree.jpeg","images/mammothcaves.jpg","images/sequoia.jpg","images/yosemite.jpg","visits.js","images/NPimages.js","parkInfo.js","App.js","serviceWorker.js","index.js"],"names":["map","./arches.jpg","./bryce.webp","./carlsbadcaverns.jpg","./deathvalley.jpg","./dvexample.jpg","./everglades.jpg","./gila.jpg","./joshua tree.jpeg","./mammothcaves.jpg","./sequoia.jpg","./yosemite.jpg","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","visit","props","react_default","a","createElement","onChange","change","value","NPimageList","Arches","Bryce Canyon","Carlsbad Caverns","Death Valley","Everglades","Gila Cliff Dwellings","Joshua Tree","Mammoth Cave","Sequoia","Yosemite","NPimage","className","parkName","src","parkImg","alt","parkInfo","name","images","r","item","index","replace","importAll","require","App","state","park","_this","showResults","onChangeStates","setState","nameChangedHandler","event","target","chooseImage","thisParkImg","key","this","visits","bind","NPimages_NPimage","src_parkInfo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69814159.chunk.js","sourcesContent":["var map = {\n\t\"./arches.jpg\": 17,\n\t\"./bryce.webp\": 18,\n\t\"./carlsbadcaverns.jpg\": 19,\n\t\"./deathvalley.jpg\": 20,\n\t\"./dvexample.jpg\": 21,\n\t\"./everglades.jpg\": 22,\n\t\"./gila.jpg\": 23,\n\t\"./joshua tree.jpeg\": 24,\n\t\"./mammothcaves.jpg\": 25,\n\t\"./sequoia.jpg\": 26,\n\t\"./yosemite.jpg\": 27\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;","module.exports = __webpack_public_path__ + \"static/media/arches.7dc2ba93.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bryce.159c94d7.webp\";","module.exports = __webpack_public_path__ + \"static/media/carlsbadcaverns.1404285f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/deathvalley.8b8bd1fb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dvexample.18263a88.jpg\";","module.exports = __webpack_public_path__ + \"static/media/everglades.ffe95c7d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gila.4c6e22ac.jpg\";","module.exports = __webpack_public_path__ + \"static/media/joshua tree.92063300.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/mammothcaves.faef97bb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sequoia.54447f64.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yosemite.76b9c169.jpg\";","import React from 'react';\r\n\r\nconst visit = (props) => {\r\n\r\n  return(\r\n    <div>\r\n      <div>\r\n        <select id=\"parkName\" onChange={props.change}>\r\n          <option value=\"Yosemite\">Yosemite</option>\r\n          <option value=\"Sequoia\">Sequoia</option>\r\n          <option value=\"Death Valley\">Death Valley</option>\r\n          <option value=\"Arches\">Arches</option>\r\n          <option value=\"Bryce Canyon\">Bryce Canyon</option>\r\n          <option value=\"Carlsbad Caverns\">Carlsbad Caverns</option>\r\n          <option value=\"Gila Cliff Dwellings\">Gila Cliff Dwellings</option>\r\n          <option value=\"Mammoth Cave\">Mammoth Cave</option>\r\n          <option value=\"Everglades\">Everglades</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nexport default visit;\r\n","import React from 'react';\r\n\r\nconst NPimageList = {\r\n  \"Arches\": \"arches.jpg\",\r\n  \"Bryce Canyon\": \"bryce.webp\",\r\n  \"Carlsbad Caverns\": \"carlsbadcaverns.jpg\",\r\n  \"Death Valley\": \"deathvalley.jpg\",\r\n  \"Everglades\": \"everglades.jpg\",\r\n  \"Gila Cliff Dwellings\": \"gila.jpg\",\r\n  \"Joshua Tree\": \"joshua tree.jpeg\",\r\n  \"Mammoth Cave\": \"mammothcaves.jpg\",\r\n  \"Sequoia\": \"sequoia.jpg\",\r\n  \"Yosemite\": \"yosemite.jpg\"\r\n};\r\n\r\nconst NPimage = (props) => {\r\n  return (\r\n    <div className=\"parkContainer\">\r\n      <div className=\"parkName\">\r\n            <h1>{props.parkName}</h1>\r\n      </div>\r\n      <img className=\"NPimages\" src={props.parkImg} alt={props.parkName} />\r\n      <div className=\"parkInfo\">\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nexport { NPimage, NPimageList };\r\n","import React from 'react';\r\n\r\n\r\nconst parkInfo = (props) => {\r\n  return (\r\n    <h1>{props.name}</h1>\r\n  )\r\n};\r\n\r\n\r\nexport default parkInfo;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Visits from './visits';\nimport { NPimage, NPimageList } from './images/NPimages';\nimport ParkInfo from './parkInfo';\n\n//importAll imports the images from the images folder\nfunction importAll(r) {\n  let images = {};\n  r.keys().map((item, index) => { return(images[item.replace('./', '')] = r(item)); });\n  return images;\n}\n//all images are stored in a dictionary type array called 'images'\nconst images = importAll(require.context('./images', false, /\\.(jpg|jpe?g|webp)$/));\n\n\nclass App extends Component {\n\n// initMap = () => {\n//   var map = new google.maps.Map(document.getElementById('map'), {\n//     center: {lat: -34.397, lng: 150.644},\n//     zoom: 8\n//   });\n// }\n\n//the park name and park image changes based on what the user decides\n  state = {\n    park: [\n      {parkName: this.parkName, parkImg: this.parkImg, showResults: false}\n    ]};\n\n//layout chnanges after first park is chosen from drop down\n  onChangeStates = () => {\n    this.setState({\n      showResults: true\n    });\n  }\n\n//when user picks from drop down, parkName state is changed and chooseImage is called\n  nameChangedHandler = (event) => {\n    this.setState({\n      parkName: event.target.value\n    }, () => {\n      this.chooseImage();\n    })\n  };\n\n// if you use 'this' in chooseImage or nameChangedHandler, must bind it below in render\n//chooseImage changes parkImg state\n  chooseImage = () => {\n    var thisParkImg = {}\n    if (this.state.parkName !== this.state.parkImg) {\n      for (var key in NPimageList) {\n        if (key === this.state.parkName) {\n          thisParkImg = images[NPimageList[key]]\n          //below was my second attempt followed by my first attempt at getting something that img src would run\n          // thisParkImg = (\"{images['\" + NPimageList[key] + \"']}\")\n          // thisParkImg = (\"{ require('\" + NPimageList[key] + \" ' ) }\")\n        }\n      }\n    };\n\n    this.setState({\n      parkImg: thisParkImg\n    }, () => {\n      this.onChangeStates();\n    })\n  };\n\n  render() {\n    return (\n      <div>\n\n        <div className={this.state.showResults ? \"title\" : \"App\"}>\n          <h1>Pick a park..</h1>\n          <Visits\n          parkName={this.state.parkName}\n          change={this.nameChangedHandler.bind(this)} />\n        </div>\n\n        {this.state.showResults ? <NPimage\n        parkImg={this.state.parkImg}\n        parkName={this.state.parkName}/> : null}\n\n        {this.state.showResults ? <ParkInfo\n        parkName={this.state.parkName}/> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}